22-13.3
30 - 14.3
3*8
16/4
#Conseguimos tambem fazer a raiz-quadrada, mas precisamos usar uma funçao.
sqrt(81)
sqrt(2)
log(10)
2^3
12^8
# Logaritimos tambem sao facilmente calculados
log(200)
log10(100)
log2(20)
## Media e Desvio Padrao
median(c(12,14,15,16,19))
mean(c(12,14,15,16,19))
sd(c(12,14,15,16,19))
ourico = c(12,14,15,16,19)
ourico
mean(ourico)
a = 10
b = 12
a
# Eu tambem posso armazenar texto
c = "Terra"
d = "Quarentena"
c
class(a)
class(c)
#Eu posso realizar facilmente uma operacao com vetores
a + b
b * a
a + c
# Posso tambem armazenar mais que 1 dado nesse vetor.
# Mas preciso utilizar a funcao concatenar 'c()'.
vetor1 = c(2,3,4,5,6,7)
vetor2 = 10
length(vetor1)
vetor2 - vetor1
vetor3 = seq(from = 1, to = 2, length.out = 6)
vetor3
vetor4 = seq(from = 0, to = 2.5, by = 0.5)
vetor4
vetor5 = rep("verao", 6)
vetor5
class(vetor5)
vetor6 <- rep(c("verao", "inverno"), each = 3)
vetor6
vetor7 = runif(6,12,14)
vetor7
vetor8 = rnorm(6,15,2)
mean(vetor8)
sd(vetor8)
###Funcao - SAMPLE.
vetor9 = sample(60,6, replace = F)
# Aqui podemos tambem criar uma "Planilha" que no R eh chamada de Data.frame
planilha = data.frame (vetor1, vetor2, vetor3, vetor4, vetor5, vetor6,vetor7,vetor8)
print(planilha)
planilha
# MATRIZ
matriz = as.matrix(planilha)
matriz
planilha$vetor7
uniforme = planilha$vetor7
mean(planilha$vetor7)
median(uniforme)
#Outra forma de selecionar eh atraves de indexacao. Onde colocamos [,] apos o nome do nosso objeto
# planilha[linhas,colunas]
planilha[,]
planilha[,5] # Pegamos a 5 coluna inteira
planilha[-3,] # Removemos 3 linha inteira
planilha[,-c(5,6)] # Remover colunas
planilha [3,4] # pegamos o valor que esta na linha 3 e coluna 4.
head(iris) # Essa funcao nos mostra as 5 primeiras linhas da planilha
iris
str(iris) # essa funcao nos mostra a estrutura da planilha, ou seja, a classe de cada uma das variaveis.
# Entao vamos comecar a Manipular a planilha. Digamos que eu queira saber a media da largura das petalas para cada especie.
# COMO FACO ISSO?
#Utilizo a funcao aggregate
aggregate(iris$Petal.Width~iris$Species, FUN = mean)
# EU posso armazenar essa informacao?
(petala_largura_media = aggregate(iris$Petal.Width~iris$Species, FUN = mean))
petala_largura_media
#Vamos trocar o nome das colunas pra nao confundir
colnames(petala_largura_media) <-  c("especie", "largura_media")
petala_largura_media
# VAmos adicionar tambem o desvio padrao nesse nosso data frame.
petala_largura_desvpad = aggregate(iris$Petal.Width~iris$Species, FUN = sd)
colnames(petala_largura_desvpad) = c("especie","desvpad")
petala_largura_media$desvpad = petala_largura_desvpad$desvpad #coloquei a coluna desvio padrao
# Aqui podemos tambem criar uma "Planilha" que no R eh chamada de Data.frame
planilha = data.frame (vetor1, vetor2, vetor3, vetor4, vetor5, vetor6,vetor7,vetor8,vetor9)
planilha
# MATRIZ
matriz = as.matrix(planilha)
matriz
str(matriz)
planilha$vetor7
uniforme = planilha$vetor7
mean(planilha$vetor7)
median(uniforme)
#Outra forma de selecionar eh atraves de indexacao. Onde colocamos [,] apos o nome do nosso objeto
# planilha[linhas,colunas]
planilha[,]
planilha[,5] # Pegamos a 5 coluna inteira
planilha[-3,] # Removemos 3 linha inteira
planilha[,-c(5,6)] # Remover colunas
planilha [3,4] # pegamos o valor que esta na linha 3 e coluna 4.
head(iris) # Essa funcao nos mostra as 5 primeiras linhas da planilha
iris
str(iris) # essa funcao nos mostra a estrutura da planilha, ou seja, a classe de cada uma das variaveis.
# Entao vamos comecar a Manipular a planilha. Digamos que eu queira saber a media da largura das petalas para cada especie.
# COMO FACO ISSO?
#Utilizo a funcao aggregate
aggregate(iris$Petal.Width~iris$Species, FUN = mean)
# EU posso armazenar essa informacao?
(petala_largura_media = aggregate(iris$Petal.Width~iris$Species, FUN = mean))
petala_largura_media
#Vamos trocar o nome das colunas pra nao confundir
colnames(petala_largura_media) <-  c("especie", "largura_media")
petala_largura_media
# VAmos adicionar tambem o desvio padrao nesse nosso data frame.
petala_largura_desvpad = aggregate(iris$Petal.Width~iris$Species, FUN = sd)
colnames(petala_largura_desvpad) = c("especie","desvpad")
petala_largura_media$desvpad = petala_largura_desvpad$desvpad #coloquei a coluna desvio padrao
petala_largura_media
c = c(1,2,3,4,NA,NA)
mean(c)
mean(c,na.rm=T)
teste = (1:40)
teste 1 = c((1:40),NA,NA,NA,NA,NA,NA)
teste1 = c((1:40),NA,NA,NA,NA,NA,NA)
mean(teste)
mean(teste1)
mean(teste1, na.rm=T)
version()
cite()
citation()
version
sessionInfo()
install.packages(c("isoband", "lme4", "processx", "questionr", "rlang", "vegan"))
citation()
version
sessionInfo()
citation()
version
12/0
0/0
install.packages(c("isoband", "lme4"))
sessionInfo()
library(sciplot)
sessionInfo()
iris_2spp <- subset(iris, subset = ["versicolor","virginica"])
iris_2spp <- subset(iris, select = c("versicolor","virginica"))
iris_2spp <- subset(iris, select = c("versicolor"&"virginica"))
iris_2spp <- subset(iris, select = c("versicolor"))
iris_2spp <- subset(iris, select = c("versicolor", "virginica"))
table(iris$Species)
iris_2spp <- subset(iris, subset = iris$Species =="virginica"+iris$Species == "versicolor")
iris_2spp <- subset(iris, subset = iris$Species =="virginica")
iris_2spp <- subset(iris, subset = iris$Species !="virginica")
iris_2spp
iris_2spp <- subset(iris, subset = iris$Species =="setosa|versicolor")
iris_2spp
iris_2spp <- subset(iris, subset = iris$Species =="setosa"|"versicolor")
teste = subset(iris, subset = c(iris$Species=='versicolor', iris$Species =='setosa'))
teste
View(teste)
rm(list=ls())
iris_2spp <- subset(iris, subset = iris$Species !="virginica")
teste = subset(iris, subset = c(iris$Species=='versicolor', iris$Species =='setosa'))
View(teste)
n = 51000000
mega = rep(NA,n)
for (i in 1:n){
mega[i] <-sample(60,1)
}
sort(table(mega), decreasing = T)[1:10]
n = 510000
mega = rep(NA,n)
for (i in 1:n){
mega[i] <-sample(31,1)
}
sort(table(mega), decreasing = T)[1:10]
n = 5100000
mega = rep(NA,n)
for (i in 1:n){
mega[i] <-sample(80,1)
}
sort(table(mega), decreasing = T)[1:10]
#########################################################
############ Multivariadas ##############################
rm(list=ls())
version
data("varechem")
setwd("~/GitHub/Uso-do-R-e-Analises-de-dados")
rm(list=ls())
library(vegan) #Pacote para fazer ordenações
env<-read.csv("DoubsEnv.csv", row.name= 1)
View(env)
summary(env)
env.pca<-rda(env, scale=T) #não preciso de matriz pq PCA usa obrigatoriamente euclidiana
env.pca
summary(env.pca)
biplot(env.pca, xlab="PC1(54%)", ylab="PC2(20%)")
biplot(env.pca, scaling= 1, xlab="PC1(54%)", ylab="PC2(20%)")
par(mfrow=c(1,2))
biplot(env.pca, xlab="PC1(54%)", ylab="PC2(20%)")
biplot(env.pca, scaling= 1, xlab="PC1(54%)", ylab="PC2(20%)", main="scaling1")
dev.off()
ambiente<-rep(c("Estuario","Rio","Lagoa"),each=10)
ambiente
biplot(env.pca,
scaling= 1,
xlab="PC1(54%)", ylab="PC2(20%)",
main="PCA",
display = c("sites", "species"),
type = c("text","points"))
ordihull(env.pca,scaling=1,
group = ambiente,
col = c(1,2,3))
legend("topright",
col = c(1,2,3),
pch = 1,
cex = 0.6,
legend = c("Estuário","Rio","Lagoa"))
######################################################
######### PCoA- Principal Coordenate Analysis ########
rm(list=ls())
data(dune)
head(dune)
str(dune)
## Gerar matriz com vegdist, função que já vem com o pacote vegan
library(vegan)
?vegdist
#dados de contagem, usar disimilaridade Bray-Curtis
matriz.dune<-vegdist(dune, method="bray")
round(matriz.dune,2)
?cmdscale #função para gerar PCoA, vem junto com o pacote vegan
dune.pcoa<-cmdscale(matriz.dune, eig=TRUE)
dune.pcoa$eig
#pacote ape extrai eigenvalues humanizado(de fácil compreensão humana)
library(ape)
eigen<-pcoa(matriz.dune)
eigen$values
#plotar pcoa com a função ordiplot
ordiplot(dune.pcoa)
#plotar identificador de amostras
ordiplot(dune.pcoa, type='t')
#plotar a ordenação
dune.pcoa$points #n tem o nome das sps, então vamos adicionar
dune.pcoa$species
dune.pcoa$species <- wascores(dune.pcoa$points,dune)
dune.pcoa$species
#editar pcoa
plot.pcoa<-ordiplot(dune.pcoa, type="none")
points(plot.pcoa, "sites",pch=15, col=rep(c(1,3),each=10))
text(plot.pcoa,"species", cex=0.5)
?metaMDS #função para fazer nMDS
nmds.dune<-metaMDS(dune, distance = "bray", try = 50)
nmds.dune # stress de 11%
stressplot(nmds.dune)
#plotar ordenação
plot(nmds.dune)
#plotar com informações
plot(nmds.dune, type="t")
plot(nmds.dune, type="n")
points(nmds.dune, "sites",pch=15, col=rep(c(1,3),each=10))
text(nmds.dune, "species", cex= 0.5)
##Comparar pcoa e nmds
par(mfrow=c(1,2))
plot.pcoa<-ordiplot(dune.pcoa, type="none", main="PCoA")
points(plot.pcoa, "sites",pch=15, col=rep(c(1,3),each=10))
plot(nmds.dune, type="n", main="nMDS")
points(nmds.dune, "sites",pch=15, col=rep(c(1,3),each=10))
## pacotes para o teste pareado
install.packages('devtools')
library(devtools)
install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
library(pairwiseAdonis)
library(vegan)
data(dune)
data(dune.env)
View(dune.env)
#gerar matriz
dune.matriz<-vegdist(dune, method="bray")
#teste de homocedastidicidade com betadisper
## IMPORTANTE...  o betadisper precisa de matriz !!!
?betadisper
regu<-betadisper(dune.matriz, dune.env$Management)
uso<-betadisper(dune.matriz, dune.env$Use)
#Resultado da homocedasticidade
anova(regu)
anova(uso)
plot(regu, label.cex=0.5)
plot(uso, hull = FALSE, ellipse = TRUE, label = F)
#Caso dê significativo, fazer teste pareado para
#identificar onde as varâncias são diferentes
permutest(uso, pairwise=T)
#adonis é um função para calcular a PERMANOVA !!
#adonis para 1 fator
adonis(dune ~ Management, data = dune.env, method="bray", permutations = 9999)
#teste pareado
pairwise.adonis(dune, dune.env$Management, perm = 9999)
## modelo com 2 fatores
adonis(dune ~ Management + Use, data = dune.env, method="bray", permutations = 9999)
# se trocar a ordem faz diferença? permutações....
adonis(dune ~ Use + Management, data = dune.env, method="bray", permutations = 9999)
#modelo com interação
adonis(dune ~ Use + Management+ Use*Management, data = dune.env, method="bray", permutations = 9999)
data("varechem")
View(varechem)
summary(varechem) #verificar as médias e quão distantes eslas estão, bom pra ver isso
env.pca<-rda(varechem, scale=T) #não preciso de matriz pq PCA usa obrigatoriamente euclidiana
env.pca
summary(env.pca)
biplot(env.pca, xlab="PC1(37%)", ylab="PC2(22%)")
## 2) plotar PCoA e nMDS usando iris.
## 3) Permanova de Iris
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
## 4) Conclusoes gerais analisando em conjunto uma ordenação (PcoA ou nDMS) e PERMANOVA
install.packages("devtools")
data("varechem")
summary(varechem) #verificar as médias e quão distantes eslas estão, bom pra ver isso
env.pca<-rda(varechem, scale=T) #não preciso de matriz pq PCA usa obrigatoriamente euclidiana
env.pca
summary(env.pca)
biplot(env.pca, xlab="PC1(37%)", ylab="PC2(22%)")
biplot(env.pca, xlab="PC1(37%)", ylab="PC2(22%)")
## 2) plotar PCoA e nMDS usando iris.
## Será necessário remover a coluna de characters (species)
data(iris)
iris$Species <- NULL
View(iris)
summary(iris)
str(iris)
#PCoA
library(vegan)
#dados de contagem, usar disimilaridade Bray-Curtis
matriz.iris<-vegdist(iris, method="bray")
round(matriz.iris,2)
iris.pcoa<-cmdscale(matriz.iris, eig=TRUE)
library(ape)
eigen<-pcoa(matriz.iris)
eigen$values
#plotar pcoa com a função ordiplot
ordiplot(iris.pcoa)
#plotar identificador de amostras
ordiplot(iris.pcoa, type='t')
#plotar a ordenação
iris.pcoa$points #n tem o nome das sps, então vamos adicion
iris.pcoa$points #n tem o nome das sps, então vamos adicionar
iris.pcoa$species
iris.pcoa$species <- wascores(iris.pcoa$points,iris)
iris.pcoa$species
plot.pcoa<-ordiplot(iris.pcoa, type="none")
points(plot.pcoa, "sites",pch=16, col=rep(c(1,3),each=10))
text(plot.pcoa,"species", cex=1)
points(plot.pcoa, "sites",pch=21, col=rep(c(1,3),each=10))
plot.pcoa<-ordiplot(iris.pcoa, type="none")
points(plot.pcoa, "sites",pch=21, col=rep(c(1,3),each=10))
plot.pcoa
points(plot.pcoa, "sites",pch=21, col=rep(c(1,2,3),each=50))
text(plot.pcoa,"species", cex=1)
points(plot.pcoa, "sites",pch=rep(c(15,16,17), each = 50), col=rep(c(1,2,3),each=50))
plot.pcoa<-ordiplot(iris.pcoa, type="none")
points(plot.pcoa, "sites",pch=rep(c(15,16,17), each = 50), col=rep(c(1,2,3),each=50))
points(plot.pcoa, "sites",pch=rep(c(15,16,17), each = 50), col=rep(c(1,5,3),each=50))
text(plot.pcoa,"species", cex=1)
text(plot.pcoa,"species", cex=0.5)
iris.pcoa$species <- wascores(iris.pcoa$points,iris, expand = T)
iris.pcoa$species
plot.pcoa<-ordiplot(iris.pcoa, type="none")
points(plot.pcoa, "sites",pch=rep(c(15,16,17), each = 50), col=rep(c(1,5,3),each=50))
text(plot.pcoa,"species", cex=0.5)
points(plot.pcoa, "sites",pch=rep(c(15,16,17), each = 50), col=rep(c(1,5,3),each=50))
text(plot.pcoa,"species", cex=0.5)
points(plot.pcoa, "sites",pch=rep(c(1,6,7), each = 50), col=rep(c(1,5,3),each=50))
plot.pcoa<-ordiplot(iris.pcoa, type="none")
points(plot.pcoa, "sites",pch=rep(c(1,6,7), each = 50), col=rep(c(1,5,3),each=50))
text(plot.pcoa,"species", cex=0.5)
plot.pcoa<-ordiplot(iris.pcoa, type="none")
points(plot.pcoa, "sites",pch=16, col=rep(c(1,2,30),each=50))
legend("topright",
col = c(1,2,30),
pch = 16,
cex = 0.6,
legend = c("Setosa","Versicolor","Virginica"))
points(plot.pcoa, "sites",pch=rep(c(9,21,25),each=50), col="black")
text(plot.pcoa,"species", cex=0.8)
##MDS
nmds.iris<-metaMDS(iris, distance = "bray", try = 50)
nmds.iris # stress de 3%
stressplot(nmds.iris)
#plotar ordenação
plot(nmds.iris)
#plotar com informações
plot(nmds.iris, type="t")
plot(nmds.iris, type="n")
points(nmds.iris, "sites",pch=rep(c(9,21,25)), col= "black", each=50)
text(nmds.iris, "species", cex= 0.5)
points(nmds.iris, "sites",pch=rep(c(9,21,25)), col= "black", each=50)
text(nmds.iris, "species", cex= 0.5)
nmds.iris
##MDS
nmds.iris<-metaMDS(iris, distance = "bray", try = 100)
nmds.iris # stress de 3%
stressplot(nmds.iris)
#plotar ordenação
plot(nmds.iris)
#plotar com informações
plot(nmds.iris, type="t")
plot(nmds.iris, type="n")
points(nmds.iris, "sites",pch=rep(c(9,21,25)), col= "black", each=50)
text(nmds.iris, "species", cex= 0.5)
#plotar com informações
plot(nmds.iris, type="t")
plot(nmds.iris, type="n")
points(nmds.iris, "sites",pch=rep(c(9,21,25)), col= "black", each=50)
text(nmds.iris, "species", cex= 0.5)
plot(nmds.iris, type="n", bty = "u")
plot(nmds.iris, type="n", bty = "l")
points(nmds.iris, "sites",pch=rep(c(9,21,25)), col= "black", each=50)
plot(nmds.iris, type="n", bty = "u", col = "grey")
points(nmds.iris, "sites",pch=rep(c(9,21,25), each=50), col= "black")
text(nmds.iris, "species", cex= 0.5)
plot(nmds.iris, type="n", bty = "u")
plot(nmds.iris, type="n", bty = "u", lty=2)
points(nmds.iris, "sites",pch=rep(c(9,21,25), each=50), col= "black")
#plotar com informações
plot(nmds.iris, type="t")
plot(nmds.iris, type="n")
points(nmds.iris, "sites",pch=rep(c(9,21,25), each=50), col= "black")
text(nmds.iris, "species", cex= 0.5)
legend("topright",
col = 1,
pch = c(09,21,25)
cex = 0.6,
legend = c("Setosa","Versicolor","Virginica"))
legend("topright",
col = 1,
pch = c(09,21,25)
cex = 0.6,
legend = c("Setosa","Versicolor","Virginica"))
legend("topright",
col = 1,
pch = c(09,21,25),
cex = 0.6,
legend = c("Setosa","Versicolor","Virginica"))
## 3) Permanova de Iris
## as caracteristicas das flores são diferentes entre as species?
data(iris)
## 3) Permanova de Iris
## as caracteristicas das flores são diferentes entre as species?
data(iris)
iris
head(iris)
iris2 = iris[,-5]
head(iris2)
require(graphics); require(grDevices)
x  <- as.matrix(mtcars)
rc <- rainbow(nrow(x), start = 0, end = .3)
cc <- rainbow(ncol(x), start = 0, end = .3)
hv <- heatmap(x, col = cm.colors(256), scale = "column",
RowSideColors = rc, ColSideColors = cc, margins = c(5,10),
xlab = "specification variables", ylab =  "Car Models",
main = "heatmap(<Mtcars data>, ..., scale = \"column\")")
utils::str(hv) # the two re-ordering index vectors
permanova.iris = adonis(iris2~iris$Species, method="bray", permutations = 9999)
(permanova.iris = adonis(iris2~iris$Species, method="bray", permutations = 9999))
pariwise.adonis(iris2,iris$Species)
pairwise.adonis(iris2,iris$Species)
pairwise.adonis(iris2,iris$Species)
(permanova.iris = adonis(iris2~iris$Species, method="bray", permutations = 9999))
pairwise.adonis(iris2,iris$Species)
legend("topright",
col = 1,
pch = c(09,21,25),
cex = 0.6,
legend = c("Setosa","Versicolor","Virginica"))
aggregate(iris$Sepal.Width~iris$Species, FUN = mean)
aggregate(iris$Sepal.Width~iris$Species, FUN = sd)
aggregate(iris$Petal.Length~iris$Species, FUN = sd)
aggregate(iris$Petal.Length~iris$Species, FUN = mean)
plot(iris$Sepal.Width)
plot(iris$Sepal.Width, col = rep(c(1,2,3), each = 50))
plot(iris$Sepal.Width, col = rep(c(1,9,3), each = 50))
plot(iris$Sepal.Width, col = rep(c(1,19,3), each = 50))
plot(iris$Sepal.Width, col = rep(c(1,4,3),pch=15, each = 50))
plot(iris$Sepal.Width, col = rep(c(1,4,3),pch=16, each = 50))
plot(iris$Sepal.Width, col = rep(c(1,4,3),pch=16, each = 50))
plot(iris$Sepal.Width, col = rep(c(1,4,3), each = 50),pch=16)
